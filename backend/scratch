@app.get("/api/analytics/real-time")
def get_real_time_analytics():
    return sales_aggregator.get_sales_metrics()

@app.websocket("/ws/sales")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            # Get total USD sales
            metrics = sales_aggregator.get_sales_metrics()
            await websocket.send_json(metrics)
            await asyncio.sleep(1)
    except Exception as e:
        print(f"WebSocket error: {e}")

@app.get("/api/analytics/")
def get_analytics(
    days: int = 30,
    db: Session = Depends(get_db)
):
    # Get historical sales total
    total_sales = db.query(models.SalesTransaction).with_entities(
        func.sum(models.SalesTransaction.converted_amount_usd)
    ).scalar() or 0
    
    # Add real-time sales
    real_time_metrics = sales_aggregator.get_sales_metrics()
    
    return {
        "total_sales_usd": total_sales + real_time_metrics['total_sales_usd']
    }
    
    
# Update real-time counters
    sales_aggregator.update_sales_counters(db_sale)
    
    # Broadcast update to connected clients
    await sales_aggregator.broadcast_sales_update({
        "type": "new_sale",
        "data": {
            "amount_usd": converted_amount,
            "region": sale.region,
            "sales_rep": sale.sales_rep
        }
    })
    
@asynccontextmanager
async def lifespan(app: FastAPI):
    db = SessionLocal()
    try:
        sales_aggregator.initialize_from_database(db)
        yield
    finally:
        db.close()